openapi: 3.1.1
info:
  title: Media Server
  version: v0.0.0
servers:
  - url: http://localhost/api/v1
    description: Local HTTP Development server
  - url: https://localhost/api/v1
    description: Local HTTPS Development server
paths:
  /auth/login:
    post:
      summary: Login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  format: password
                  example: asdf1234
      responses:
        "204":
          description: OK

  /auth/logout:
    get:
      summary: Logout
      security:
        - cookieAuth: []
      parameters:
        - name: all
          in: query
          required: false
          description: Logout all sessions
          schema:
            type: boolean
      tags:
        - auth
      responses:
        "204":
          description: OK

  /user/register:
    post:
      summary: Register User
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username must be unique and between 3 to 15 characters
                password:
                  type: string
                  format: password
                  description: Password must be between 8 to 32 characters
                confirm_password:
                  type: string
                  format: password
                  description: Password must be between 8 to 32 characters
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string

  /user/profile:
    get:
      summary: Get User Profile
      security:
        - cookieAuth: []
      tags:
        - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  username:
                    type: string

  /media/:
    post:
      summary: Create Media
      security:
        - cookieAuth: []
      tags:
        - media
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  media_id:
                    type: string
                  presigned_url:
                    type: string
                    format: uri
    get:
      summary: List Medias
      security:
        - cookieAuth: []
      tags:
        - media
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of listed items
          schema:
            type: integer
            example: 10
        - name: offset
          in: query
          required: false
          description: Number of items to skip
          schema:
            type: integer
            example: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/media"

  /media/{media_id}:
    get:
      summary: Get Media By ID
      tags:
        - media
      parameters:
        - name: media_id
          in: path
          required: true
          description: Media ID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/media"
    put:
      summary: Update Media By ID
      tags:
        - media
      parameters:
        - name: media_id
          in: path
          required: true
          description: Media ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
      responses:
        "204":
          description: OK
    delete:
      summary: Delete Media By ID
      tags:
        - media
      parameters:
        - name: media_id
          in: path
          required: true
          description: Media ID
          schema:
            type: string
      responses:
        "204":
          description: OK

  /movie:
    post:
      summary: Create Movie
      tags:
        - movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                tmdb_id:
                  type: string
                  description: Enter The Movie Database ID like 'movie:1234', 'series:1234' or leave empty
                media_id:
                  type: string
                  description: Enter The Media ID or leave empty
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: string
    get:
      summary: List Movies
      tags:
        - movie
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of listed items
          schema:
            type: integer
            example: 10
        - name: offset
          in: query
          required: false
          description: Number of items to skip
          schema:
            type: integer
            example: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0
                  count:
                    type: integer
                    example: 100
                    description: Total number of items
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/movie"
  /movie/search:
    get:
      summary: Search Movies
      tags:
        - movie
      parameters:
        - name: query
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: query_by
          in: query
          required: true
          description: Search by
          schema:
            type: string
            enum:
              - title
              - tags
        - name: limit
          in: query
          required: false
          description: Number of listed items
          schema:
            type: integer
            example: 10
        - name: offset
          in: query
          required: false
          description: Number of items to skip
          schema:
            type: integer
            example: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0
                  count:
                    type: integer
                    example: 100
                    description: Total number of items
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/movie"
  /movie/{movie_id}:
    get:
      summary: Get Movie By ID
      tags:
        - movie
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie ID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/movie"
    put:
      summary: Update Movie By ID
      tags:
        - movie
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                tmdb_id:
                  type: string
                  description: Enter The Movie Database ID like 'movie:1234', 'series:1234' or leave empty
                media_id:
                  type: string
                  description: Enter The Media ID or leave empty
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "204":
          description: OK
    delete:
      summary: Delete Movie By ID
      tags:
        - movie
      parameters:
        - name: movie_id
          in: path
          required: true
          description: Movie ID
          schema:
            type: string
      responses:
        "204":
          description: OK

  /series:
    post:
      summary: Create Series
      tags:
        - series
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                tmdb_id:
                  type: string
                  description: Enter The Movie Database ID like 'movie:1234', 'series:1234' or leave empty
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  series_id:
                    type: string
    get:
      summary: List Series
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            example: 10
        - name: offset
          in: query
          required: false
          description: Number of items to skip
          schema:
            type: integer
            example: 0
      tags:
        - series
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/series"
  /series/search:
    get:
      summary: Search Series
      parameters:
        - name: query
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: query_by
          in: query
          required: true
          description: Search by
          schema:
            type: string
            enum:
              - title
              - tags
        - name: limit
          in: query
          required: false
          description: Number of listed items
          schema:
            type: integer
            example: 10
        - name: offset
          in: query
          required: false
          description: Number of items to skip
          schema:
            type: integer
            example: 0
      tags:
        - series
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0
                  count:
                    type: integer
                    example: 100
                    description: Total number of items
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/series"
  /series/{series_id}:
    get:
      summary: Get Series By ID
      tags:
        - series
      parameters:
        - name: series_id
          in: path
          required: true
          description: Series ID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/series"

    put:
      summary: Update Series By ID
      tags:
        - series
      parameters:
        - name: series_id
          in: path
          required: true
          description: Series ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                tmdb_id:
                  type: string
                  description: Enter The Movie Database ID like 'movie:1234', 'series:1234' or leave empty
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "204":
          description: OK

    delete:
      summary: Delete Series By ID
      tags:
        - series
      parameters:
        - name: series_id
          in: path
          required: true
          description: Series ID
          schema:
            type: string
      responses:
        "204":
          description: OK

  /season:
    post:
      summary: Create Season
      tags:
        - season
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                series_id:
                  type: string
                title:
                  type: string
                description:
                  type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  season_id:
                    type: string

    get:
      summary: List All Seasons By Series ID
      tags:
        - season
      parameters:
        - name: series_id
          in: query
          required: true
          description: Series ID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/season"
  /season/{season_id}:
    get:
      summary: Get Season By ID
      tags:
        - season
      parameters:
        - name: season_id
          in: path
          required: true
          description: Season ID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/season"
    put:
      summary: Update Season By ID
      tags:
        - season
      parameters:
        - name: season_id
          in: path
          required: true
          description: Season ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        "204":
          description: OK
    delete:
      summary: Delete Season By ID
      tags:
        - season
      parameters:
        - name: season_id
          in: path
          required: true
          description: Season ID
          schema:
            type: string
      responses:
        "204":
          description: OK

  /episode:
    post:
      summary: Create Episode
      tags:
        - episode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                season_id:
                  type: string
                media_id:
                  type: string
                  description: Enter The Media ID or leave empty
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  episode_id:
                    type: string
    get:
      summary: Get All Episodes By Season ID
      tags:
        - episode
      parameters:
        - name: season_id
          in: query
          required: true
          description: Season ID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/episode"

  /episode/{episode_id}:
    get:
      summary: Get Episode By ID
      tags:
        - episode
      parameters:
        - name: episode_id
          in: path
          required: true
          description: Episode ID
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/episode"

    put:
      summary: Update Episode By ID
      tags:
        - episode
      parameters:
        - name: episode_id
          in: path
          required: true
          description: Episode ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                media_id:
                  type: string
                  description: Enter The Media ID or leave empty
      responses:
        "204":
          description: OK

    delete:
      summary: Delete Episode By ID
      tags:
        - episode
      parameters:
        - name: episode_id
          in: path
          required: true
          description: Episode ID
          schema:
            type: string
      responses:
        "204":
          description: OK

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_id

  schemas:
    media:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
        path:
          type: string
        type:
          $ref: "#/components/schemas/media_type"
        mime_type:
          type: string
        size:
          type: integer
          description: Size of the media file in bytes
    tmdb:
      type: object
      properties:
        id:
          type: string
        data:
          type: object
    media_type:
      type: string
      enum:
        - unknown
        - image
        - video
        - audio
    movie:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        tmdb_info:
          nullable: true
          $ref: "#/components/schemas/tmdb"
        media_info:
          nullable: true
          $ref: "#/components/schemas/media"
        tags:
          type: array
          items:
            type: string
    series:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        tmdb_info:
          nullable: true
          $ref: "#/components/schemas/tmdb"
        tags:
          type: array
          items:
            type: string

    season:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        order:
          type: integer
        series_id:
          type: string

    episode:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        order:
          type: integer
        season_id:
          type: string
        media_info:
          nullable: true
          $ref: "#/components/schemas/media"

tags:
  - name: auth
    x-displayName: Auth
  - name: user
    x-displayName: User
  - name: media
    x-displayName: Media
  - name: movie
    x-displayName: Movie
  - name: series
    x-displayName: Series
  - name: season
    x-displayName: Season
  - name: episode
    x-displayName: Episode

x-tagGroups:
  - name: GROUPS
    tags:
      - auth
      - user
      - media
      - movie
      - series
      - season
      - episode
