// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movie.sql

package sqlcgen

import (
	"context"
	"time"
)

const countMovies = `-- name: CountMovies :one
SELECT COUNT(*)
FROM movies
`

func (q *Queries) CountMovies(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMovies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMovie = `-- name: CreateMovie :exec
INSERT INTO movies (
  id,
  created_at,
  title,
  tmdb_id,
  description
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateMovieParams struct {
	ID          string
	CreatedAt   time.Time
	Title       string
	TmdbID      string
	Description string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) error {
	_, err := q.db.ExecContext(ctx, createMovie,
		arg.ID,
		arg.CreatedAt,
		arg.Title,
		arg.TmdbID,
		arg.Description,
	)
	return err
}

const deleteMovieByID = `-- name: DeleteMovieByID :exec
DELETE FROM movies
WHERE id = ?
`

func (q *Queries) DeleteMovieByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMovieByID, id)
	return err
}

const getMovieByID = `-- name: GetMovieByID :one
SELECT id, created_at, title, tmdb_id, description
FROM movies
WHERE id = ?
`

func (q *Queries) GetMovieByID(ctx context.Context, id string) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieByID, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.TmdbID,
		&i.Description,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, created_at, title, tmdb_id, description
FROM movies
LIMIT CASE
  WHEN CAST(?2 as INTEGER) < 1 THEN NULL 
  ELSE ?2 END
OFFSET CAST(?1 as INTEGER)
`

type ListMoviesParams struct {
	Offset int64
	Limit  int64
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.TmdbID,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovieByID = `-- name: UpdateMovieByID :exec
UPDATE movies
SET title = ?,
    tmdb_id = ?,
    description = ?
WHERE id = ?
`

type UpdateMovieByIDParams struct {
	Title       string
	TmdbID      string
	Description string
	ID          string
}

func (q *Queries) UpdateMovieByID(ctx context.Context, arg UpdateMovieByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateMovieByID,
		arg.Title,
		arg.TmdbID,
		arg.Description,
		arg.ID,
	)
	return err
}
