// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: otps.sql

package sqlcgen

import (
	"context"
	"time"
)

const createOTP = `-- name: CreateOTP :exec
INSERT INTO otps (email, code, created_at, expires_at)
VALUES (?, ?, (datetime(CURRENT_TIMESTAMP, 'localtime')), ?)
`

type CreateOTPParams struct {
	Email     string
	Code      string
	ExpiresAt time.Time
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) error {
	_, err := q.db.ExecContext(ctx, createOTP, arg.Email, arg.Code, arg.ExpiresAt)
	return err
}

const deleteOTPByEmail = `-- name: DeleteOTPByEmail :exec
DELETE FROM otps
WHERE email = ?
`

func (q *Queries) DeleteOTPByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteOTPByEmail, email)
	return err
}

const getOTPByEmailAndCode = `-- name: GetOTPByEmailAndCode :one
SELECT email, code, created_at, expires_at
FROM otps
WHERE email = ? AND code = ?
`

type GetOTPByEmailAndCodeParams struct {
	Email string
	Code  string
}

func (q *Queries) GetOTPByEmailAndCode(ctx context.Context, arg GetOTPByEmailAndCodeParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOTPByEmailAndCode, arg.Email, arg.Code)
	var i Otp
	err := row.Scan(
		&i.Email,
		&i.Code,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
