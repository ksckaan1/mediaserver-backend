// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tmdb_infos.sql

package sqlcgen

import (
	"context"
)

const getTMDBInfo = `-- name: GetTMDBInfo :one
SELECT id, title, original_title, poster_path, backdrop_path, vote_average, vote_count, popularity, release_date FROM tmdb_infos WHERE id = ?
`

func (q *Queries) GetTMDBInfo(ctx context.Context, id int64) (TmdbInfo, error) {
	row := q.db.QueryRowContext(ctx, getTMDBInfo, id)
	var i TmdbInfo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.OriginalTitle,
		&i.PosterPath,
		&i.BackdropPath,
		&i.VoteAverage,
		&i.VoteCount,
		&i.Popularity,
		&i.ReleaseDate,
	)
	return i, err
}

const setTMDBInfo = `-- name: SetTMDBInfo :exec
INSERT INTO tmdb_infos (id,title, original_title, poster_path, backdrop_path, vote_average, vote_count, popularity, release_date)
		VALUES(?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9) ON CONFLICT (id)
		DO
		UPDATE
		SET
			title = ?2,
			original_title = ?3,
			poster_path = ?4,
			backdrop_path = ?5,
			vote_average = ?6,
			vote_count = ?7,
			popularity = ?8,
			release_date = ?9
`

type SetTMDBInfoParams struct {
	ID            int64
	Title         string
	OriginalTitle string
	PosterPath    string
	BackdropPath  string
	VoteAverage   float64
	VoteCount     int64
	Popularity    float64
	ReleaseDate   string
}

func (q *Queries) SetTMDBInfo(ctx context.Context, arg SetTMDBInfoParams) error {
	_, err := q.db.ExecContext(ctx, setTMDBInfo,
		arg.ID,
		arg.Title,
		arg.OriginalTitle,
		arg.PosterPath,
		arg.BackdropPath,
		arg.VoteAverage,
		arg.VoteCount,
		arg.Popularity,
		arg.ReleaseDate,
	)
	return err
}
