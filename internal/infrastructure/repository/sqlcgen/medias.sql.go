// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: medias.sql

package sqlcgen

import (
	"context"
)

const createMedia = `-- name: CreateMedia :exec
INSERT INTO medias (id, path, type, storage_type, size, created_at)
		VALUES(?, ?, ?, ?, ?, (datetime (CURRENT_TIMESTAMP, 'localtime')))
`

type CreateMediaParams struct {
	ID          string
	Path        string
	Type        string
	StorageType string
	Size        int64
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) error {
	_, err := q.db.ExecContext(ctx, createMedia,
		arg.ID,
		arg.Path,
		arg.Type,
		arg.StorageType,
		arg.Size,
	)
	return err
}

const deleteMediaByID = `-- name: DeleteMediaByID :one
DELETE FROM medias
WHERE id = ?
RETURNING id
`

func (q *Queries) DeleteMediaByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteMediaByID, id)
	err := row.Scan(&id)
	return id, err
}

const getMediaByID = `-- name: GetMediaByID :one
SELECT id, created_at, path, type, storage_type, size
FROM medias
WHERE id = ?
`

func (q *Queries) GetMediaByID(ctx context.Context, id string) (Media, error) {
	row := q.db.QueryRowContext(ctx, getMediaByID, id)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Path,
		&i.Type,
		&i.StorageType,
		&i.Size,
	)
	return i, err
}
