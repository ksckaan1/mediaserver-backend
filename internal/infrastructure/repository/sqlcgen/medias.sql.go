// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: medias.sql

package sqlcgen

import (
	"context"
)

const countMedias = `-- name: CountMedias :one
SELECT COUNT(*)
FROM medias
`

func (q *Queries) CountMedias(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMedias)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMedia = `-- name: CreateMedia :exec
INSERT INTO medias (id, path, type, storage_type, mime_type, size, created_at)
		VALUES(?, ?, ?, ?, ?, ?, (datetime (CURRENT_TIMESTAMP, 'localtime')))
`

type CreateMediaParams struct {
	ID          string
	Path        string
	Type        string
	StorageType string
	MimeType    string
	Size        int64
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) error {
	_, err := q.db.ExecContext(ctx, createMedia,
		arg.ID,
		arg.Path,
		arg.Type,
		arg.StorageType,
		arg.MimeType,
		arg.Size,
	)
	return err
}

const deleteMediaByID = `-- name: DeleteMediaByID :one
DELETE FROM medias
WHERE id = ?
RETURNING id
`

func (q *Queries) DeleteMediaByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteMediaByID, id)
	err := row.Scan(&id)
	return id, err
}

const getMediaByID = `-- name: GetMediaByID :one
SELECT id, created_at, path, type, storage_type, mime_type, size
FROM medias
WHERE id = ?
`

func (q *Queries) GetMediaByID(ctx context.Context, id string) (Media, error) {
	row := q.db.QueryRowContext(ctx, getMediaByID, id)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Path,
		&i.Type,
		&i.StorageType,
		&i.MimeType,
		&i.Size,
	)
	return i, err
}

const listMedias = `-- name: ListMedias :many
SELECT id, created_at, path, type, storage_type, mime_type, size
FROM medias
LIMIT ? OFFSET ?
`

type ListMediasParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListMedias(ctx context.Context, arg ListMediasParams) ([]Media, error) {
	rows, err := q.db.QueryContext(ctx, listMedias, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Media
	for rows.Next() {
		var i Media
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Path,
			&i.Type,
			&i.StorageType,
			&i.MimeType,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
