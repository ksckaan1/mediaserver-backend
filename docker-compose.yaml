x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - "--providers.file.directory=/etc/traefik/dynamic" 
      - "--providers.file.watch=true"                    
      - "--entrypoints.web.address=:80"                  
      - "--entrypoints.websecure.address=:443"          
      - "--api.insecure=true"                            
    ports:
      - "80:80"      
      - "443:443"   
      - "8080:8080"   # Traefik dashboard
    volumes:
      - ".docker/traefik_dynamic:/etc/traefik/dynamic"
    networks:
      - app

  apidoc:
    image: busybox:latest
    container_name: apidoc
    volumes:
      - ./docs/:/web
    networks:
      - app
    command: sh -c "cd /web && httpd -f -p 8080"
    restart: unless-stopped
    logging: *default-logging

  bff_service:
    container_name: bff
    build:
      context: .
      dockerfile: .docker/bff_service.Dockerfile
    networks:
      - app
    ports:
      - "9190:8080"
    environment:
      SERVICE_NAME: bff
      ADDR: ":8080"
      MEDIA_SERVICE_ADDR: ${MEDIA_SERVICE_ADDR}
      MOVIE_SERVICE_ADDR: ${MOVIE_SERVICE_ADDR}
      SERIES_SERVICE_ADDR: ${SERIES_SERVICE_ADDR}
      SEASON_SERVICE_ADDR: ${SEASON_SERVICE_ADDR}
      EPISODE_SERVICE_ADDR: ${EPISODE_SERVICE_ADDR}
      USER_SERVICE_ADDR: ${USER_SERVICE_ADDR}
      AUTH_SERVICE_ADDR: ${AUTH_SERVICE_ADDR}
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging

  media_service:
    container_name: media_service
    build:
      context: .
      dockerfile: .docker/media_service.Dockerfile
    networks:
      - app
    # ports:
    #   - "9191:8080"
    environment:
      SERVICE_NAME: media
      ADDR: ":8080"
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_USE_SSL: ${S3_USE_SSL}
      ID_GENERATOR_NODE: 1
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  tmdb_service:
    container_name: tmdb_service
    build:
      context: .
      dockerfile: .docker/tmdb_service.Dockerfile
    networks:
      - app
    # ports:
    #   - "9192:8080"
    environment:
      SERVICE_NAME: tmdb
      ADDR: ":8080"
      TMDB_API_KEY: ${TMDB_API_KEY}
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  movie_service:
    container_name: movie_service
    build:
      context: .
      dockerfile: .docker/movie_service.Dockerfile
    networks:
      - app
    # ports:
    #   - "9193:8080"
    environment:
      SERVICE_NAME: movie
      ADDR: ":8080"
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      MEDIA_SERVICE_ADDR: ${MEDIA_SERVICE_ADDR}
      TMDB_SERVICE_ADDR: ${TMDB_SERVICE_ADDR}
      ID_GENERATOR_NODE: 1
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  series_service:
    container_name: series_service
    build:
      context: .
      dockerfile: .docker/series_service.Dockerfile
    networks:
      - app
    # ports:
    #   - "9194:8080"
    environment:
      SERVICE_NAME: series
      ADDR: ":8080"
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      TMDB_SERVICE_ADDR: ${TMDB_SERVICE_ADDR}
      ID_GENERATOR_NODE: 1
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  season_service:
    container_name: season_service
    build:
      context: .
      dockerfile: .docker/season_service.Dockerfile
    networks:
      - app
    # ports:
    #   - "9195:8080"
    environment:
      SERVICE_NAME: season
      ADDR: ":8080"
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      SERIES_SERVICE_ADDR: ${SERIES_SERVICE_ADDR}
      EPISODE_SERVICE_ADDR: ${EPISODE_SERVICE_ADDR}
      ID_GENERATOR_NODE: 1
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  episode_service:
    container_name: episode_service
    build:
      context: .
      dockerfile: .docker/episode_service.Dockerfile
    networks:
      - app
    # ports:
      # - "9196:8080"
    environment:
      SERVICE_NAME: episode
      ADDR: ":8080"
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      MEDIA_SERVICE_ADDR: ${MEDIA_SERVICE_ADDR}
      SEASON_SERVICE_ADDR: ${SEASON_SERVICE_ADDR}
      ID_GENERATOR_NODE: 1
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  user_service:
    container_name: user_service
    build:
      context: .
      dockerfile: .docker/user_service.Dockerfile
    networks:
      - app
    # ports:
    #   - "9197:8080"
    environment:
      SERVICE_NAME: user
      ADDR: ":8080"
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      ID_GENERATOR_NODE: 1
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  auth_service:
    container_name: auth_service
    build:
      context: .
      dockerfile: .docker/auth_service.Dockerfile
    networks:
      - app
    # ports:
    #   - "9198:8080"
    environment:
      SERVICE_NAME: auth
      ADDR: ":8080"
      COUCHBASE_HOST: ${COUCHBASE_HOST}
      COUCHBASE_USER: ${COUCHBASE_USER}
      COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD}
      COUCHBASE_BUCKET: ${COUCHBASE_BUCKET}
      ID_GENERATOR_NODE: 1
      USER_SERVICE_ADDR: ${USER_SERVICE_ADDR}
      TRACER_ENDPOINT: ${TRACER_ENDPOINT}
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - cbq

  minio:
    container_name: minio
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app
    logging: *default-logging

  minio-client:
    container_name: minio-client
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c " sleep 5; /usr/bin/mc config host add myminio http://${S3_ENDPOINT} ${S3_ACCESS_KEY} ${S3_SECRET_KEY}; /usr/bin/mc mb myminio/${S3_BUCKET} || true; /usr/bin/mc anonymous set public myminio/${S3_BUCKET}; exit 0; "
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    networks:
      - app
    logging: *default-logging

  couchbase:
    container_name: couchbase
    image: couchbase:community
    networks:
      - app
    ports:
      - "8091:8091" # Management Panel
      - "8092:8092" # Views
      - "8093:8093" # Query (N1QL)
      - "8094:8094" # Search
      - "11207:11207" # Data protocol (SSL)
      - "11210:11210" # Data protocol
    volumes:
      - couchbase_data:/opt/couchbase/var
    environment:
      - COUCHBASE_ADMINISTRATOR_USERNAME=${COUCHBASE_USER}
      - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_PASSWORD}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8091" ]
      interval: 5s
      timeout: 5s
      retries: 10

  cbq:
    container_name: cbq
    image: sequoiatools/cbq:latest
    networks:
      - app
    command: -u ${COUCHBASE_USER} -p ${COUCHBASE_PASSWORD} -e ${COUCHBASE_HOST} -f /init/couchbase.sql
    volumes:
      - ./.docker/init/couchbase.sql:/init/couchbase.sql
    depends_on:
      couchbase:
        condition: service_healthy


  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    networks:
      - app
    logging: *default-logging
volumes:
  minio_data:
  couchbase_data:


networks:
  app:
    driver: bridge
    name: mediaserver_network
