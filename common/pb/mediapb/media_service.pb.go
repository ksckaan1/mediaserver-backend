// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: protofiles/media_service.proto

package mediapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MediaType int32

const (
	MediaType_UNKNOWN MediaType = 0
	MediaType_IMAGE   MediaType = 1
	MediaType_VIDEO   MediaType = 2
	MediaType_AUDIO   MediaType = 3
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "UNKNOWN",
		1: "IMAGE",
		2: "VIDEO",
		3: "AUDIO",
	}
	MediaType_value = map[string]int32{
		"UNKNOWN": 0,
		"IMAGE":   1,
		"VIDEO":   2,
		"AUDIO":   3,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_protofiles_media_service_proto_enumTypes[0].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_protofiles_media_service_proto_enumTypes[0]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{0}
}

type UploadMediaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadMediaRequest) Reset() {
	*x = UploadMediaRequest{}
	mi := &file_protofiles_media_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMediaRequest) ProtoMessage() {}

func (x *UploadMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMediaRequest.ProtoReflect.Descriptor instead.
func (*UploadMediaRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{0}
}

func (x *UploadMediaRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UploadMediaRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UploadMediaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MediaId       string                 `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadMediaResponse) Reset() {
	*x = UploadMediaResponse{}
	mi := &file_protofiles_media_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMediaResponse) ProtoMessage() {}

func (x *UploadMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMediaResponse.ProtoReflect.Descriptor instead.
func (*UploadMediaResponse) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{1}
}

func (x *UploadMediaResponse) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

type GetMediaByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MediaId       string                 `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMediaByIDRequest) Reset() {
	*x = GetMediaByIDRequest{}
	mi := &file_protofiles_media_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMediaByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaByIDRequest) ProtoMessage() {}

func (x *GetMediaByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaByIDRequest.ProtoReflect.Descriptor instead.
func (*GetMediaByIDRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetMediaByIDRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

type Media struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Path          string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Type          MediaType              `protobuf:"varint,6,opt,name=type,proto3,enum=mediapb.MediaType" json:"type,omitempty"`
	MimeType      string                 `protobuf:"bytes,7,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size          int64                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Media) Reset() {
	*x = Media{}
	mi := &file_protofiles_media_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{3}
}

func (x *Media) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Media) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Media) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Media) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Media) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Media) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_UNKNOWN
}

func (x *Media) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Media) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListMediasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int64                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMediasRequest) Reset() {
	*x = ListMediasRequest{}
	mi := &file_protofiles_media_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediasRequest) ProtoMessage() {}

func (x *ListMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediasRequest.ProtoReflect.Descriptor instead.
func (*ListMediasRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListMediasRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListMediasRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type MediaList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*Media               `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count         int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Limit         int64                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaList) Reset() {
	*x = MediaList{}
	mi := &file_protofiles_media_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaList) ProtoMessage() {}

func (x *MediaList) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaList.ProtoReflect.Descriptor instead.
func (*MediaList) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{5}
}

func (x *MediaList) GetList() []*Media {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MediaList) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MediaList) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MediaList) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type UpdateMediaByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MediaId       string                 `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMediaByIDRequest) Reset() {
	*x = UpdateMediaByIDRequest{}
	mi := &file_protofiles_media_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMediaByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMediaByIDRequest) ProtoMessage() {}

func (x *UpdateMediaByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMediaByIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateMediaByIDRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMediaByIDRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *UpdateMediaByIDRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DeleteMediaByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MediaId       string                 `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMediaByIDRequest) Reset() {
	*x = DeleteMediaByIDRequest{}
	mi := &file_protofiles_media_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMediaByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMediaByIDRequest) ProtoMessage() {}

func (x *DeleteMediaByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_media_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMediaByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteMediaByIDRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_media_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMediaByIDRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

var File_protofiles_media_service_proto protoreflect.FileDescriptor

var file_protofiles_media_service_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x30, 0x0a,
	0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x22, 0x90, 0x02, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x73, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x49, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x2a, 0x39, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x32, 0xee, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x1b, 0x5a, 0x19, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x62, 0x3b, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_protofiles_media_service_proto_rawDescOnce sync.Once
	file_protofiles_media_service_proto_rawDescData []byte
)

func file_protofiles_media_service_proto_rawDescGZIP() []byte {
	file_protofiles_media_service_proto_rawDescOnce.Do(func() {
		file_protofiles_media_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protofiles_media_service_proto_rawDesc), len(file_protofiles_media_service_proto_rawDesc)))
	})
	return file_protofiles_media_service_proto_rawDescData
}

var file_protofiles_media_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protofiles_media_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protofiles_media_service_proto_goTypes = []any{
	(MediaType)(0),                 // 0: mediapb.MediaType
	(*UploadMediaRequest)(nil),     // 1: mediapb.UploadMediaRequest
	(*UploadMediaResponse)(nil),    // 2: mediapb.UploadMediaResponse
	(*GetMediaByIDRequest)(nil),    // 3: mediapb.GetMediaByIDRequest
	(*Media)(nil),                  // 4: mediapb.Media
	(*ListMediasRequest)(nil),      // 5: mediapb.ListMediasRequest
	(*MediaList)(nil),              // 6: mediapb.MediaList
	(*UpdateMediaByIDRequest)(nil), // 7: mediapb.UpdateMediaByIDRequest
	(*DeleteMediaByIDRequest)(nil), // 8: mediapb.DeleteMediaByIDRequest
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 10: google.protobuf.Empty
}
var file_protofiles_media_service_proto_depIdxs = []int32{
	9,  // 0: mediapb.Media.created_at:type_name -> google.protobuf.Timestamp
	9,  // 1: mediapb.Media.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: mediapb.Media.type:type_name -> mediapb.MediaType
	4,  // 3: mediapb.MediaList.list:type_name -> mediapb.Media
	1,  // 4: mediapb.MediaService.UploadMedia:input_type -> mediapb.UploadMediaRequest
	3,  // 5: mediapb.MediaService.GetMediaByID:input_type -> mediapb.GetMediaByIDRequest
	5,  // 6: mediapb.MediaService.ListMedias:input_type -> mediapb.ListMediasRequest
	7,  // 7: mediapb.MediaService.UpdateMediaByID:input_type -> mediapb.UpdateMediaByIDRequest
	8,  // 8: mediapb.MediaService.DeleteMediaByID:input_type -> mediapb.DeleteMediaByIDRequest
	2,  // 9: mediapb.MediaService.UploadMedia:output_type -> mediapb.UploadMediaResponse
	4,  // 10: mediapb.MediaService.GetMediaByID:output_type -> mediapb.Media
	6,  // 11: mediapb.MediaService.ListMedias:output_type -> mediapb.MediaList
	10, // 12: mediapb.MediaService.UpdateMediaByID:output_type -> google.protobuf.Empty
	10, // 13: mediapb.MediaService.DeleteMediaByID:output_type -> google.protobuf.Empty
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_protofiles_media_service_proto_init() }
func file_protofiles_media_service_proto_init() {
	if File_protofiles_media_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protofiles_media_service_proto_rawDesc), len(file_protofiles_media_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protofiles_media_service_proto_goTypes,
		DependencyIndexes: file_protofiles_media_service_proto_depIdxs,
		EnumInfos:         file_protofiles_media_service_proto_enumTypes,
		MessageInfos:      file_protofiles_media_service_proto_msgTypes,
	}.Build()
	File_protofiles_media_service_proto = out.File
	file_protofiles_media_service_proto_goTypes = nil
	file_protofiles_media_service_proto_depIdxs = nil
}
