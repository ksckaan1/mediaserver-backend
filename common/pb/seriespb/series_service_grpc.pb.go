// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: series_service.proto

package seriespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeriesService_CreateSeries_FullMethodName     = "/seriespb.SeriesService/CreateSeries"
	SeriesService_GetSeriesByID_FullMethodName    = "/seriespb.SeriesService/GetSeriesByID"
	SeriesService_ListSeries_FullMethodName       = "/seriespb.SeriesService/ListSeries"
	SeriesService_UpdateSeriesByID_FullMethodName = "/seriespb.SeriesService/UpdateSeriesByID"
	SeriesService_DeleteSeriesByID_FullMethodName = "/seriespb.SeriesService/DeleteSeriesByID"
)

// SeriesServiceClient is the client API for SeriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeriesServiceClient interface {
	CreateSeries(ctx context.Context, in *CreateSeriesRequest, opts ...grpc.CallOption) (*CreateSeriesResponse, error)
	GetSeriesByID(ctx context.Context, in *GetSeriesByIDRequest, opts ...grpc.CallOption) (*Series, error)
	ListSeries(ctx context.Context, in *ListSeriesRequest, opts ...grpc.CallOption) (*SeriesList, error)
	UpdateSeriesByID(ctx context.Context, in *UpdateSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSeriesByID(ctx context.Context, in *DeleteSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type seriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeriesServiceClient(cc grpc.ClientConnInterface) SeriesServiceClient {
	return &seriesServiceClient{cc}
}

func (c *seriesServiceClient) CreateSeries(ctx context.Context, in *CreateSeriesRequest, opts ...grpc.CallOption) (*CreateSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSeriesResponse)
	err := c.cc.Invoke(ctx, SeriesService_CreateSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) GetSeriesByID(ctx context.Context, in *GetSeriesByIDRequest, opts ...grpc.CallOption) (*Series, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Series)
	err := c.cc.Invoke(ctx, SeriesService_GetSeriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) ListSeries(ctx context.Context, in *ListSeriesRequest, opts ...grpc.CallOption) (*SeriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeriesList)
	err := c.cc.Invoke(ctx, SeriesService_ListSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) UpdateSeriesByID(ctx context.Context, in *UpdateSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeriesService_UpdateSeriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) DeleteSeriesByID(ctx context.Context, in *DeleteSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeriesService_DeleteSeriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeriesServiceServer is the server API for SeriesService service.
// All implementations must embed UnimplementedSeriesServiceServer
// for forward compatibility.
type SeriesServiceServer interface {
	CreateSeries(context.Context, *CreateSeriesRequest) (*CreateSeriesResponse, error)
	GetSeriesByID(context.Context, *GetSeriesByIDRequest) (*Series, error)
	ListSeries(context.Context, *ListSeriesRequest) (*SeriesList, error)
	UpdateSeriesByID(context.Context, *UpdateSeriesByIDRequest) (*emptypb.Empty, error)
	DeleteSeriesByID(context.Context, *DeleteSeriesByIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSeriesServiceServer()
}

// UnimplementedSeriesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeriesServiceServer struct{}

func (UnimplementedSeriesServiceServer) CreateSeries(context.Context, *CreateSeriesRequest) (*CreateSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeries not implemented")
}
func (UnimplementedSeriesServiceServer) GetSeriesByID(context.Context, *GetSeriesByIDRequest) (*Series, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesByID not implemented")
}
func (UnimplementedSeriesServiceServer) ListSeries(context.Context, *ListSeriesRequest) (*SeriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeries not implemented")
}
func (UnimplementedSeriesServiceServer) UpdateSeriesByID(context.Context, *UpdateSeriesByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeriesByID not implemented")
}
func (UnimplementedSeriesServiceServer) DeleteSeriesByID(context.Context, *DeleteSeriesByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeriesByID not implemented")
}
func (UnimplementedSeriesServiceServer) mustEmbedUnimplementedSeriesServiceServer() {}
func (UnimplementedSeriesServiceServer) testEmbeddedByValue()                       {}

// UnsafeSeriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeriesServiceServer will
// result in compilation errors.
type UnsafeSeriesServiceServer interface {
	mustEmbedUnimplementedSeriesServiceServer()
}

func RegisterSeriesServiceServer(s grpc.ServiceRegistrar, srv SeriesServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeriesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeriesService_ServiceDesc, srv)
}

func _SeriesService_CreateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).CreateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_CreateSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).CreateSeries(ctx, req.(*CreateSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_GetSeriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).GetSeriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_GetSeriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).GetSeriesByID(ctx, req.(*GetSeriesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_ListSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).ListSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_ListSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).ListSeries(ctx, req.(*ListSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_UpdateSeriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeriesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).UpdateSeriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_UpdateSeriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).UpdateSeriesByID(ctx, req.(*UpdateSeriesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_DeleteSeriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).DeleteSeriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_DeleteSeriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).DeleteSeriesByID(ctx, req.(*DeleteSeriesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeriesService_ServiceDesc is the grpc.ServiceDesc for SeriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seriespb.SeriesService",
	HandlerType: (*SeriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeries",
			Handler:    _SeriesService_CreateSeries_Handler,
		},
		{
			MethodName: "GetSeriesByID",
			Handler:    _SeriesService_GetSeriesByID_Handler,
		},
		{
			MethodName: "ListSeries",
			Handler:    _SeriesService_ListSeries_Handler,
		},
		{
			MethodName: "UpdateSeriesByID",
			Handler:    _SeriesService_UpdateSeriesByID_Handler,
		},
		{
			MethodName: "DeleteSeriesByID",
			Handler:    _SeriesService_DeleteSeriesByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "series_service.proto",
}
