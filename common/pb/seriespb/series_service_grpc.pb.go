// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: series_service.proto

package seriespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeriesService_CreateSeries_FullMethodName     = "/mediapb.SeriesService/CreateSeries"
	SeriesService_GetSeriesByID_FullMethodName    = "/mediapb.SeriesService/GetSeriesByID"
	SeriesService_ListSeries_FullMethodName       = "/mediapb.SeriesService/ListSeries"
	SeriesService_UpdateSeriesByID_FullMethodName = "/mediapb.SeriesService/UpdateSeriesByID"
	SeriesService_DeleteSeriesByID_FullMethodName = "/mediapb.SeriesService/DeleteSeriesByID"
)

// SeriesServiceClient is the client API for SeriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SERIES SERVICE
type SeriesServiceClient interface {
	CreateSeries(ctx context.Context, in *CreateSeriesRequest, opts ...grpc.CallOption) (*CreateSeriesResponse, error)
	GetSeriesByID(ctx context.Context, in *GetSeriesByIDRequest, opts ...grpc.CallOption) (*Series, error)
	ListSeries(ctx context.Context, in *ListSeriesRequest, opts ...grpc.CallOption) (*SeriesList, error)
	UpdateSeriesByID(ctx context.Context, in *UpdateSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSeriesByID(ctx context.Context, in *DeleteSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type seriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeriesServiceClient(cc grpc.ClientConnInterface) SeriesServiceClient {
	return &seriesServiceClient{cc}
}

func (c *seriesServiceClient) CreateSeries(ctx context.Context, in *CreateSeriesRequest, opts ...grpc.CallOption) (*CreateSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSeriesResponse)
	err := c.cc.Invoke(ctx, SeriesService_CreateSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) GetSeriesByID(ctx context.Context, in *GetSeriesByIDRequest, opts ...grpc.CallOption) (*Series, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Series)
	err := c.cc.Invoke(ctx, SeriesService_GetSeriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) ListSeries(ctx context.Context, in *ListSeriesRequest, opts ...grpc.CallOption) (*SeriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeriesList)
	err := c.cc.Invoke(ctx, SeriesService_ListSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) UpdateSeriesByID(ctx context.Context, in *UpdateSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeriesService_UpdateSeriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesServiceClient) DeleteSeriesByID(ctx context.Context, in *DeleteSeriesByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeriesService_DeleteSeriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeriesServiceServer is the server API for SeriesService service.
// All implementations must embed UnimplementedSeriesServiceServer
// for forward compatibility.
//
// SERIES SERVICE
type SeriesServiceServer interface {
	CreateSeries(context.Context, *CreateSeriesRequest) (*CreateSeriesResponse, error)
	GetSeriesByID(context.Context, *GetSeriesByIDRequest) (*Series, error)
	ListSeries(context.Context, *ListSeriesRequest) (*SeriesList, error)
	UpdateSeriesByID(context.Context, *UpdateSeriesByIDRequest) (*emptypb.Empty, error)
	DeleteSeriesByID(context.Context, *DeleteSeriesByIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSeriesServiceServer()
}

// UnimplementedSeriesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeriesServiceServer struct{}

func (UnimplementedSeriesServiceServer) CreateSeries(context.Context, *CreateSeriesRequest) (*CreateSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeries not implemented")
}
func (UnimplementedSeriesServiceServer) GetSeriesByID(context.Context, *GetSeriesByIDRequest) (*Series, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesByID not implemented")
}
func (UnimplementedSeriesServiceServer) ListSeries(context.Context, *ListSeriesRequest) (*SeriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeries not implemented")
}
func (UnimplementedSeriesServiceServer) UpdateSeriesByID(context.Context, *UpdateSeriesByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeriesByID not implemented")
}
func (UnimplementedSeriesServiceServer) DeleteSeriesByID(context.Context, *DeleteSeriesByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeriesByID not implemented")
}
func (UnimplementedSeriesServiceServer) mustEmbedUnimplementedSeriesServiceServer() {}
func (UnimplementedSeriesServiceServer) testEmbeddedByValue()                       {}

// UnsafeSeriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeriesServiceServer will
// result in compilation errors.
type UnsafeSeriesServiceServer interface {
	mustEmbedUnimplementedSeriesServiceServer()
}

func RegisterSeriesServiceServer(s grpc.ServiceRegistrar, srv SeriesServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeriesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeriesService_ServiceDesc, srv)
}

func _SeriesService_CreateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).CreateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_CreateSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).CreateSeries(ctx, req.(*CreateSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_GetSeriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).GetSeriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_GetSeriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).GetSeriesByID(ctx, req.(*GetSeriesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_ListSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).ListSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_ListSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).ListSeries(ctx, req.(*ListSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_UpdateSeriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeriesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).UpdateSeriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_UpdateSeriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).UpdateSeriesByID(ctx, req.(*UpdateSeriesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeriesService_DeleteSeriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServiceServer).DeleteSeriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeriesService_DeleteSeriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServiceServer).DeleteSeriesByID(ctx, req.(*DeleteSeriesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeriesService_ServiceDesc is the grpc.ServiceDesc for SeriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediapb.SeriesService",
	HandlerType: (*SeriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeries",
			Handler:    _SeriesService_CreateSeries_Handler,
		},
		{
			MethodName: "GetSeriesByID",
			Handler:    _SeriesService_GetSeriesByID_Handler,
		},
		{
			MethodName: "ListSeries",
			Handler:    _SeriesService_ListSeries_Handler,
		},
		{
			MethodName: "UpdateSeriesByID",
			Handler:    _SeriesService_UpdateSeriesByID_Handler,
		},
		{
			MethodName: "DeleteSeriesByID",
			Handler:    _SeriesService_DeleteSeriesByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "series_service.proto",
}

const (
	SeasonService_CreateSeason_FullMethodName             = "/mediapb.SeasonService/CreateSeason"
	SeasonService_GetSeasonByID_FullMethodName            = "/mediapb.SeasonService/GetSeasonByID"
	SeasonService_ListSeasonsBySeriesID_FullMethodName    = "/mediapb.SeasonService/ListSeasonsBySeriesID"
	SeasonService_UpdateSeasonByID_FullMethodName         = "/mediapb.SeasonService/UpdateSeasonByID"
	SeasonService_ReorderSeasonsBySeriesID_FullMethodName = "/mediapb.SeasonService/ReorderSeasonsBySeriesID"
	SeasonService_DeleteSeasonByID_FullMethodName         = "/mediapb.SeasonService/DeleteSeasonByID"
)

// SeasonServiceClient is the client API for SeasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SEASON SERVICE
type SeasonServiceClient interface {
	CreateSeason(ctx context.Context, in *CreateSeasonRequest, opts ...grpc.CallOption) (*CreateSeasonResponse, error)
	GetSeasonByID(ctx context.Context, in *GetSeasonByIDRequest, opts ...grpc.CallOption) (*Season, error)
	ListSeasonsBySeriesID(ctx context.Context, in *ListSeasonsBySeriesIDRequest, opts ...grpc.CallOption) (*SeasonList, error)
	UpdateSeasonByID(ctx context.Context, in *UpdateSeasonByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReorderSeasonsBySeriesID(ctx context.Context, in *ReorderSeasonsBySeriesIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSeasonByID(ctx context.Context, in *DeleteSeasonByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type seasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonServiceClient(cc grpc.ClientConnInterface) SeasonServiceClient {
	return &seasonServiceClient{cc}
}

func (c *seasonServiceClient) CreateSeason(ctx context.Context, in *CreateSeasonRequest, opts ...grpc.CallOption) (*CreateSeasonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSeasonResponse)
	err := c.cc.Invoke(ctx, SeasonService_CreateSeason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) GetSeasonByID(ctx context.Context, in *GetSeasonByIDRequest, opts ...grpc.CallOption) (*Season, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Season)
	err := c.cc.Invoke(ctx, SeasonService_GetSeasonByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) ListSeasonsBySeriesID(ctx context.Context, in *ListSeasonsBySeriesIDRequest, opts ...grpc.CallOption) (*SeasonList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeasonList)
	err := c.cc.Invoke(ctx, SeasonService_ListSeasonsBySeriesID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) UpdateSeasonByID(ctx context.Context, in *UpdateSeasonByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeasonService_UpdateSeasonByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) ReorderSeasonsBySeriesID(ctx context.Context, in *ReorderSeasonsBySeriesIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeasonService_ReorderSeasonsBySeriesID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) DeleteSeasonByID(ctx context.Context, in *DeleteSeasonByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeasonService_DeleteSeasonByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeasonServiceServer is the server API for SeasonService service.
// All implementations must embed UnimplementedSeasonServiceServer
// for forward compatibility.
//
// SEASON SERVICE
type SeasonServiceServer interface {
	CreateSeason(context.Context, *CreateSeasonRequest) (*CreateSeasonResponse, error)
	GetSeasonByID(context.Context, *GetSeasonByIDRequest) (*Season, error)
	ListSeasonsBySeriesID(context.Context, *ListSeasonsBySeriesIDRequest) (*SeasonList, error)
	UpdateSeasonByID(context.Context, *UpdateSeasonByIDRequest) (*emptypb.Empty, error)
	ReorderSeasonsBySeriesID(context.Context, *ReorderSeasonsBySeriesIDRequest) (*emptypb.Empty, error)
	DeleteSeasonByID(context.Context, *DeleteSeasonByIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSeasonServiceServer()
}

// UnimplementedSeasonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeasonServiceServer struct{}

func (UnimplementedSeasonServiceServer) CreateSeason(context.Context, *CreateSeasonRequest) (*CreateSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeason not implemented")
}
func (UnimplementedSeasonServiceServer) GetSeasonByID(context.Context, *GetSeasonByIDRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonByID not implemented")
}
func (UnimplementedSeasonServiceServer) ListSeasonsBySeriesID(context.Context, *ListSeasonsBySeriesIDRequest) (*SeasonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeasonsBySeriesID not implemented")
}
func (UnimplementedSeasonServiceServer) UpdateSeasonByID(context.Context, *UpdateSeasonByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeasonByID not implemented")
}
func (UnimplementedSeasonServiceServer) ReorderSeasonsBySeriesID(context.Context, *ReorderSeasonsBySeriesIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderSeasonsBySeriesID not implemented")
}
func (UnimplementedSeasonServiceServer) DeleteSeasonByID(context.Context, *DeleteSeasonByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeasonByID not implemented")
}
func (UnimplementedSeasonServiceServer) mustEmbedUnimplementedSeasonServiceServer() {}
func (UnimplementedSeasonServiceServer) testEmbeddedByValue()                       {}

// UnsafeSeasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeasonServiceServer will
// result in compilation errors.
type UnsafeSeasonServiceServer interface {
	mustEmbedUnimplementedSeasonServiceServer()
}

func RegisterSeasonServiceServer(s grpc.ServiceRegistrar, srv SeasonServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeasonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeasonService_ServiceDesc, srv)
}

func _SeasonService_CreateSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).CreateSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonService_CreateSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).CreateSeason(ctx, req.(*CreateSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_GetSeasonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).GetSeasonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonService_GetSeasonByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).GetSeasonByID(ctx, req.(*GetSeasonByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_ListSeasonsBySeriesID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeasonsBySeriesIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).ListSeasonsBySeriesID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonService_ListSeasonsBySeriesID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).ListSeasonsBySeriesID(ctx, req.(*ListSeasonsBySeriesIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_UpdateSeasonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeasonByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).UpdateSeasonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonService_UpdateSeasonByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).UpdateSeasonByID(ctx, req.(*UpdateSeasonByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_ReorderSeasonsBySeriesID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderSeasonsBySeriesIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).ReorderSeasonsBySeriesID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonService_ReorderSeasonsBySeriesID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).ReorderSeasonsBySeriesID(ctx, req.(*ReorderSeasonsBySeriesIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_DeleteSeasonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeasonByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).DeleteSeasonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeasonService_DeleteSeasonByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).DeleteSeasonByID(ctx, req.(*DeleteSeasonByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeasonService_ServiceDesc is the grpc.ServiceDesc for SeasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediapb.SeasonService",
	HandlerType: (*SeasonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeason",
			Handler:    _SeasonService_CreateSeason_Handler,
		},
		{
			MethodName: "GetSeasonByID",
			Handler:    _SeasonService_GetSeasonByID_Handler,
		},
		{
			MethodName: "ListSeasonsBySeriesID",
			Handler:    _SeasonService_ListSeasonsBySeriesID_Handler,
		},
		{
			MethodName: "UpdateSeasonByID",
			Handler:    _SeasonService_UpdateSeasonByID_Handler,
		},
		{
			MethodName: "ReorderSeasonsBySeriesID",
			Handler:    _SeasonService_ReorderSeasonsBySeriesID_Handler,
		},
		{
			MethodName: "DeleteSeasonByID",
			Handler:    _SeasonService_DeleteSeasonByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "series_service.proto",
}

const (
	EpisodeService_CreateEpisode_FullMethodName             = "/mediapb.EpisodeService/CreateEpisode"
	EpisodeService_GetEpisodeByID_FullMethodName            = "/mediapb.EpisodeService/GetEpisodeByID"
	EpisodeService_ListEpisodesBySeasonID_FullMethodName    = "/mediapb.EpisodeService/ListEpisodesBySeasonID"
	EpisodeService_UpdateEpisodeByID_FullMethodName         = "/mediapb.EpisodeService/UpdateEpisodeByID"
	EpisodeService_ReorderEpisodesBySeasonID_FullMethodName = "/mediapb.EpisodeService/ReorderEpisodesBySeasonID"
	EpisodeService_DeleteEpisodeByID_FullMethodName         = "/mediapb.EpisodeService/DeleteEpisodeByID"
)

// EpisodeServiceClient is the client API for EpisodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EPISODE SERVICE
type EpisodeServiceClient interface {
	CreateEpisode(ctx context.Context, in *CreateEpisodeRequest, opts ...grpc.CallOption) (*CreateEpisodeResponse, error)
	GetEpisodeByID(ctx context.Context, in *GetEpisodeByIDRequest, opts ...grpc.CallOption) (*Episode, error)
	ListEpisodesBySeasonID(ctx context.Context, in *ListEpisodesBySeasonIDRequest, opts ...grpc.CallOption) (*EpisodeList, error)
	UpdateEpisodeByID(ctx context.Context, in *UpdateEpisodeByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReorderEpisodesBySeasonID(ctx context.Context, in *ReorderEpisodesBySeasonIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEpisodeByID(ctx context.Context, in *DeleteEpisodeByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type episodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEpisodeServiceClient(cc grpc.ClientConnInterface) EpisodeServiceClient {
	return &episodeServiceClient{cc}
}

func (c *episodeServiceClient) CreateEpisode(ctx context.Context, in *CreateEpisodeRequest, opts ...grpc.CallOption) (*CreateEpisodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEpisodeResponse)
	err := c.cc.Invoke(ctx, EpisodeService_CreateEpisode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) GetEpisodeByID(ctx context.Context, in *GetEpisodeByIDRequest, opts ...grpc.CallOption) (*Episode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Episode)
	err := c.cc.Invoke(ctx, EpisodeService_GetEpisodeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) ListEpisodesBySeasonID(ctx context.Context, in *ListEpisodesBySeasonIDRequest, opts ...grpc.CallOption) (*EpisodeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EpisodeList)
	err := c.cc.Invoke(ctx, EpisodeService_ListEpisodesBySeasonID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) UpdateEpisodeByID(ctx context.Context, in *UpdateEpisodeByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EpisodeService_UpdateEpisodeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) ReorderEpisodesBySeasonID(ctx context.Context, in *ReorderEpisodesBySeasonIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EpisodeService_ReorderEpisodesBySeasonID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeServiceClient) DeleteEpisodeByID(ctx context.Context, in *DeleteEpisodeByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EpisodeService_DeleteEpisodeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpisodeServiceServer is the server API for EpisodeService service.
// All implementations must embed UnimplementedEpisodeServiceServer
// for forward compatibility.
//
// EPISODE SERVICE
type EpisodeServiceServer interface {
	CreateEpisode(context.Context, *CreateEpisodeRequest) (*CreateEpisodeResponse, error)
	GetEpisodeByID(context.Context, *GetEpisodeByIDRequest) (*Episode, error)
	ListEpisodesBySeasonID(context.Context, *ListEpisodesBySeasonIDRequest) (*EpisodeList, error)
	UpdateEpisodeByID(context.Context, *UpdateEpisodeByIDRequest) (*emptypb.Empty, error)
	ReorderEpisodesBySeasonID(context.Context, *ReorderEpisodesBySeasonIDRequest) (*emptypb.Empty, error)
	DeleteEpisodeByID(context.Context, *DeleteEpisodeByIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEpisodeServiceServer()
}

// UnimplementedEpisodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEpisodeServiceServer struct{}

func (UnimplementedEpisodeServiceServer) CreateEpisode(context.Context, *CreateEpisodeRequest) (*CreateEpisodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEpisode not implemented")
}
func (UnimplementedEpisodeServiceServer) GetEpisodeByID(context.Context, *GetEpisodeByIDRequest) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisodeByID not implemented")
}
func (UnimplementedEpisodeServiceServer) ListEpisodesBySeasonID(context.Context, *ListEpisodesBySeasonIDRequest) (*EpisodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEpisodesBySeasonID not implemented")
}
func (UnimplementedEpisodeServiceServer) UpdateEpisodeByID(context.Context, *UpdateEpisodeByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEpisodeByID not implemented")
}
func (UnimplementedEpisodeServiceServer) ReorderEpisodesBySeasonID(context.Context, *ReorderEpisodesBySeasonIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderEpisodesBySeasonID not implemented")
}
func (UnimplementedEpisodeServiceServer) DeleteEpisodeByID(context.Context, *DeleteEpisodeByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpisodeByID not implemented")
}
func (UnimplementedEpisodeServiceServer) mustEmbedUnimplementedEpisodeServiceServer() {}
func (UnimplementedEpisodeServiceServer) testEmbeddedByValue()                        {}

// UnsafeEpisodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpisodeServiceServer will
// result in compilation errors.
type UnsafeEpisodeServiceServer interface {
	mustEmbedUnimplementedEpisodeServiceServer()
}

func RegisterEpisodeServiceServer(s grpc.ServiceRegistrar, srv EpisodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedEpisodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EpisodeService_ServiceDesc, srv)
}

func _EpisodeService_CreateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).CreateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpisodeService_CreateEpisode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).CreateEpisode(ctx, req.(*CreateEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_GetEpisodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpisodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).GetEpisodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpisodeService_GetEpisodeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).GetEpisodeByID(ctx, req.(*GetEpisodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_ListEpisodesBySeasonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEpisodesBySeasonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).ListEpisodesBySeasonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpisodeService_ListEpisodesBySeasonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).ListEpisodesBySeasonID(ctx, req.(*ListEpisodesBySeasonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_UpdateEpisodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEpisodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).UpdateEpisodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpisodeService_UpdateEpisodeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).UpdateEpisodeByID(ctx, req.(*UpdateEpisodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_ReorderEpisodesBySeasonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderEpisodesBySeasonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).ReorderEpisodesBySeasonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpisodeService_ReorderEpisodesBySeasonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).ReorderEpisodesBySeasonID(ctx, req.(*ReorderEpisodesBySeasonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeService_DeleteEpisodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEpisodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeServiceServer).DeleteEpisodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EpisodeService_DeleteEpisodeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeServiceServer).DeleteEpisodeByID(ctx, req.(*DeleteEpisodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EpisodeService_ServiceDesc is the grpc.ServiceDesc for EpisodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpisodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediapb.EpisodeService",
	HandlerType: (*EpisodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEpisode",
			Handler:    _EpisodeService_CreateEpisode_Handler,
		},
		{
			MethodName: "GetEpisodeByID",
			Handler:    _EpisodeService_GetEpisodeByID_Handler,
		},
		{
			MethodName: "ListEpisodesBySeasonID",
			Handler:    _EpisodeService_ListEpisodesBySeasonID_Handler,
		},
		{
			MethodName: "UpdateEpisodeByID",
			Handler:    _EpisodeService_UpdateEpisodeByID_Handler,
		},
		{
			MethodName: "ReorderEpisodesBySeasonID",
			Handler:    _EpisodeService_ReorderEpisodesBySeasonID_Handler,
		},
		{
			MethodName: "DeleteEpisodeByID",
			Handler:    _EpisodeService_DeleteEpisodeByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "series_service.proto",
}
