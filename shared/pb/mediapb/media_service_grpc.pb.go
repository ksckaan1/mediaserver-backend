// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protofiles/media_service.proto

package mediapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaService_CreateMedia_FullMethodName     = "/mediapb.MediaService/CreateMedia"
	MediaService_GetMediaByID_FullMethodName    = "/mediapb.MediaService/GetMediaByID"
	MediaService_ListMedias_FullMethodName      = "/mediapb.MediaService/ListMedias"
	MediaService_UpdateMediaByID_FullMethodName = "/mediapb.MediaService/UpdateMediaByID"
	MediaService_DeleteMediaByID_FullMethodName = "/mediapb.MediaService/DeleteMediaByID"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaServiceClient interface {
	CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*CreateMediaResponse, error)
	GetMediaByID(ctx context.Context, in *GetMediaByIDRequest, opts ...grpc.CallOption) (*Media, error)
	ListMedias(ctx context.Context, in *ListMediasRequest, opts ...grpc.CallOption) (*MediaList, error)
	UpdateMediaByID(ctx context.Context, in *UpdateMediaByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMediaByID(ctx context.Context, in *DeleteMediaByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*CreateMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_CreateMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMediaByID(ctx context.Context, in *GetMediaByIDRequest, opts ...grpc.CallOption) (*Media, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Media)
	err := c.cc.Invoke(ctx, MediaService_GetMediaByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListMedias(ctx context.Context, in *ListMediasRequest, opts ...grpc.CallOption) (*MediaList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MediaList)
	err := c.cc.Invoke(ctx, MediaService_ListMedias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateMediaByID(ctx context.Context, in *UpdateMediaByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MediaService_UpdateMediaByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DeleteMediaByID(ctx context.Context, in *DeleteMediaByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MediaService_DeleteMediaByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility.
type MediaServiceServer interface {
	CreateMedia(context.Context, *CreateMediaRequest) (*CreateMediaResponse, error)
	GetMediaByID(context.Context, *GetMediaByIDRequest) (*Media, error)
	ListMedias(context.Context, *ListMediasRequest) (*MediaList, error)
	UpdateMediaByID(context.Context, *UpdateMediaByIDRequest) (*emptypb.Empty, error)
	DeleteMediaByID(context.Context, *DeleteMediaByIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaServiceServer struct{}

func (UnimplementedMediaServiceServer) CreateMedia(context.Context, *CreateMediaRequest) (*CreateMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
}
func (UnimplementedMediaServiceServer) GetMediaByID(context.Context, *GetMediaByIDRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaByID not implemented")
}
func (UnimplementedMediaServiceServer) ListMedias(context.Context, *ListMediasRequest) (*MediaList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedias not implemented")
}
func (UnimplementedMediaServiceServer) UpdateMediaByID(context.Context, *UpdateMediaByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMediaByID not implemented")
}
func (UnimplementedMediaServiceServer) DeleteMediaByID(context.Context, *DeleteMediaByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaByID not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}
func (UnimplementedMediaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_CreateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CreateMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CreateMedia(ctx, req.(*CreateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMediaByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMediaByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMediaByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMediaByID(ctx, req.(*GetMediaByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ListMedias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListMedias(ctx, req.(*ListMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateMediaByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateMediaByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UpdateMediaByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateMediaByID(ctx, req.(*UpdateMediaByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DeleteMediaByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteMediaByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DeleteMediaByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteMediaByID(ctx, req.(*DeleteMediaByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediapb.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedia",
			Handler:    _MediaService_CreateMedia_Handler,
		},
		{
			MethodName: "GetMediaByID",
			Handler:    _MediaService_GetMediaByID_Handler,
		},
		{
			MethodName: "ListMedias",
			Handler:    _MediaService_ListMedias_Handler,
		},
		{
			MethodName: "UpdateMediaByID",
			Handler:    _MediaService_UpdateMediaByID_Handler,
		},
		{
			MethodName: "DeleteMediaByID",
			Handler:    _MediaService_DeleteMediaByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/media_service.proto",
}
